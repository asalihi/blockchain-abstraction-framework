import { exec } from 'shelljs';

export type DistributiveExtension<T, K> = T extends any ? T & K : never;
export type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;
export type DistributivePick<T, K extends keyof T> = T extends object ? Pick<T, K> : never;
export type DistributivePickValues<T, K extends keyof T> = T extends object ? T[K] : never;
export type AtLeastOneProperty<T extends object> = T extends object ? { [K in keyof T]-?: Pick<T, K> & Partial<T> extends infer O ? { [P in keyof O]: O[P] } : never }[keyof T] : never;
export type AtLeastOnePropertyForKey<T extends object, K extends AllKeys<T>> = Omit<T, K> & (T[K] extends object ? { [key in K]: AtLeastOneProperty<T[K]> } : { [key in K]: T[K] });
export type AllKeys<T> = T extends any ? keyof T : never;
export type ExclusifyUnion<T, K extends AllKeys<T> = AllKeys<T>> = T extends any ? (T & Partial<Record<Exclude<K, keyof T>, never>>) extends infer O ? { [P in keyof O]: O[P] } : never : never;
export type DistributeAtLeastOnePropertyForKey<T, K extends AllKeys<T>> = T extends object ? AtLeastOnePropertyForKey<T, K> : never;
export type GenericObject = { [key: string]: any };
export type Maybe<T> = T | undefined;
export type Possibly<T> = T | undefined | null;
export type Nullable<T> = T | null;
export type RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };
export type Endpoint = string;
export type EnvironmentVariables = { [key: string]: string };
export type File = string;
export type Folder = string;
export type Identifier = string;
export type Name = Identifier;
export type Parameters = { [key: string]: any };
export type Password = string;
export type Port = number;
export type Routine = { identifier: string, fn: () => any, cron: string };
export type Timestamp = number;
export type Username = Identifier;
export type ShellCommand = string;
export type ShellScript = string;
export type ShellInstructionParameters = string[];
export type ShellExecutionResults = { 'code': number, 'output': string[], 'errors': string[] };
export type ExecutionOptions = { silent: boolean, critical: boolean };