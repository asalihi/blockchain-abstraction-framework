import { DistributiveExtension, Identifier, PartialExecutionCondition, ExecutionCondition, SendEmailAction, SendHTTPRequestAction } from '@core/types/types';

export const ProcessStateValues = ['active', 'deactivated'];
export type ProcessState = typeof ProcessStateValues[number];
export type ListOfProcessVersions = Identifier[];
export type ListOfInstances = Identifier[];
export type ProcessDataReferences = { 'creation'?: Identifier, 'deactivation'?: Identifier };
export type ProcessActions = { [key in 'creation' | 'deactivation']?: (SendEmailAction | SendHTTPRequestAction)[] };
export type ProcessOptions = { 'actions'?: ProcessActions };
export type ProcessResources = { 'data'?: ProcessDataReferences, 'options'?: Identifier };
export type ProcessTraces = { 'creation'?: Identifier, 'deactivation'?: Identifier };
export type ProcessVersionDataReferences = { 'creation'?: Identifier, 'deactivation'?: Identifier };
export type ProcessVersionActions = { [key in 'creation' | 'deactivation']?: (SendEmailAction | SendHTTPRequestAction)[] };
export type ProcessTaskIdentifierDefinition = { 'identifier': Identifier };
export type ProcessStandardControlTypeDefinition = { 'control': 'standard' };
export type ProcessKeyControlTypeDefinition = { 'control': 'key', 'reference'?: Identifier };
export type ProcessCompensatingControlTypeDefinition = { 'control': 'compensating', 'reference': Identifier };
export type ProcessControlTypeDefinition = ProcessStandardControlTypeDefinition | ProcessKeyControlTypeDefinition | ProcessCompensatingControlTypeDefinition;
export type ProcessTaskPartialConditions = PartialExecutionCondition[];
export type ProcessTaskConditions = { [key: string]: ExecutionCondition };
export type ProcessTaskConditionDefinitions = { 'conditions'?: ProcessTaskPartialConditions };
export type ProcessTaskActions = { [key in 'success' | 'failure' | 'execution' | 'violation']?: (SendEmailAction | SendHTTPRequestAction)[] };
export type ProcessTaskActionDefinitions = { 'actions'?: ProcessTaskActions };
export type ProcessStandardTaskDefinition = ProcessTaskIdentifierDefinition;
export type ProcessControlDefinition = DistributiveExtension<ProcessTaskIdentifierDefinition, ProcessControlTypeDefinition>;
export type RawProcessTaskDefinition = ProcessStandardTaskDefinition | ProcessControlDefinition;
export type ProcessTaskDefinition = RawProcessTaskDefinition & ProcessTaskConditionDefinitions & ProcessTaskActionDefinitions;
export type ProcessTaskDefinitionExtension = ProcessTaskIdentifierDefinition & ProcessTaskConditionDefinitions & ProcessTaskActionDefinitions;
export type ProcessTaskDefinitions = ProcessTaskDefinition[];
export type ProcessTaskDefinitionExtensions = ProcessTaskDefinitionExtension[];
export type ProcessVersionOptions = { 'excluded'?: Identifier[], 'tasks'?: ProcessTaskDefinitions, 'actions'?: ProcessVersionActions };
export type ProcessVersionResources = { 'file': Identifier, 'data'?: ProcessVersionDataReferences, 'options'?: Identifier };
export type ProcessVersionTraces = { 'creation'?: Identifier, 'deactivation'?: Identifier };
export const ExecutionInstanceStateValues = ['inactive', 'running', 'deviated', 'finished', 'cancelled', 'error'];
export type ExecutionInstanceState = typeof ExecutionInstanceStateValues[number];
export const ProcessTraceTypeValues = ['creation', 'deactivation'];
export type ProcessTraceType = typeof ProcessTraceTypeValues[number];
export const ExecutionInstanceTraceTypeValues = ['creation', 'activation', 'deviation', 'termination', 'cancelation'];
export type ExecutionInstanceTraceType = typeof ExecutionInstanceTraceTypeValues[number];
export type ExecutionInstanceDataReferences = { 'start'?: Identifier, 'deviation'?: Identifier, 'stop'?: Identifier };
export type ExecutionInstanceActions = { [key in 'creation' | 'activation' | 'deviation' | 'termination' | 'cancelation']?: (SendEmailAction | SendHTTPRequestAction)[] };
export type ExecutionInstanceOptions = { 'tasks'?: ProcessTaskDefinitionExtensions, 'actions'?: ExecutionInstanceActions };
export type ExecutionInstanceResources = { 'data': ExecutionInstanceDataReferences, 'options'?: Identifier };
export type ExecutionInstanceTraces = { 'creation'?: Identifier, 'start'?: Identifier, 'updates'?: Identifier[], 'deviation'?: Identifier, 'stop'?: Identifier };
export type ProcessExecutableElementTraceIdentifier = { 'trace': Identifier };
export type ProcessExecutableElementTrace = ProcessExecutableElementTraceIdentifier & { 'element': Identifier };
export const ProcessElementTraceTypeValues = ['task_executed', 'standard_control_executed', 'key_control_executed', 'compensating_control_executed', 'instance_terminated', 'validation_failed', 'deviation', 'update', 'invalid_element'];
export type ProcessElementTraceType = typeof ProcessElementTraceTypeValues[number];
export type ProcessEndEventTrace = ProcessExecutableElementTraceIdentifier & { 'end': Identifier };
export const ProcessBranchStateValues = ['candidate', 'active', 'executed', 'cancelled'];
export type ProcessBranchState = typeof ProcessBranchStateValues[number];
export type ProcessBranch = { 'connection': Identifier, 'state': ProcessBranchState, 'traces': ListOfProcessTasksAndEndEventTraces };
export type ListOfProcessBranches = ProcessBranch[];
export const ProcessExecutionStateValues = ['candidate', 'active', 'executed', 'cancelled'];
export type ProcessExecutionState = typeof ProcessExecutionStateValues[number];
export const ProcessLevelStateValues = ['candidate', 'active', 'executed', 'cancelled'];
export type ProcessLevelState = typeof ProcessLevelStateValues[number];
export type ProcessLevelType = 'head' | 'gateway' | 'connection';
export type ProcessLevelIdentifier = { 'gateway': Identifier };
export type ProcessLevel = ProcessLevelIdentifier & { 'state': ProcessLevelState, 'branches': ListOfProcessBranches };
export type ProcessExecutionBranch = { 'start': Identifier, 'state': ProcessBranchState, 'traces': ListOfProcessTasksAndEndEventTraces };
export type ListOfProcessExecutionBranches = ProcessExecutionBranch[];
export type ProcessExecution = { 'state': ProcessLevelState, 'branches': ListOfProcessExecutionBranches };
export type ListOfProcessTasksAndEndEventTraces = (ProcessExecutableElementTrace | ProcessEndEventTrace | ProcessLevel)[];
export const TrackAndTraceTraceContextValues = ['process', 'version', 'instance', 'task'];
export type TrackAndTraceTraceContext = typeof TrackAndTraceTraceContextValues[number];
export type ProcessTaskOptions = ProcessTaskConditionDefinitions & ProcessTaskActionDefinitions & { 'deviation'?: boolean };
export const PossibleOrConfirmedKeyControlViolationValues = ['possible', 'confirmed'];
export type PossibleOrConfirmedKeyControlViolation = typeof ProcessExecutionStateValues[number];
export type KeyControlViolation = { 'control': Identifier, 'violation': PossibleOrConfirmedKeyControlViolation };
export type NokeyControlViolation = { 'violation': 'none' };
export type PossibleAndConfirmedKeyControlViolationResults = { 'violation': PossibleOrConfirmedKeyControlViolation, 'controls': KeyControlViolation[] };
export type KeyControlViolationResults = NokeyControlViolation | PossibleAndConfirmedKeyControlViolationResults;
export type ProcessTaskTraceResources = { 'options'?: Identifier, 'data'?: Identifier, 'verifications'?: Identifier };