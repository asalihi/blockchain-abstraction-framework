import { Nullable, Identifier, ProcessConnectionClass, ProcessElementClass } from '@core/types/types';

/* RAW PROCESS */
export type ProcessIdentifierAsAttribute = { '_attributes': { 'id': string } };
export type ProcessNameAsAttribute = { '_attributes': { 'name': string } };
export type ProcessValueAsAttribute = { '_attributes': { 'value': string } };
export type ProcessFlowReferencesAsAttributes = { '_attributes': { 'sourceRef': string, 'targetRef': string } };
export type RawProcessFlow = { '_text': string[] };
export type RawListOfProcessFlows = RawProcessFlow[];
export type RawProcessIncomingFlows = { 'bpmn:incoming': RawListOfProcessFlows };
export type RawProcessIncomingFlowsWithoutBPMNNamespace = { 'incoming': RawListOfProcessFlows };
export type RawProcessOutgoingFlows = { 'bpmn:outgoing': RawListOfProcessFlows };
export type RawProcessOutgoingFlowsWithoutBPMNNamespace = { 'outgoing': RawListOfProcessFlows };
export type RawProcessStartEvent = ProcessIdentifierAsAttribute & RawProcessOutgoingFlows;
export type RawProcessStartEventWithoutBPMNNamespace = ProcessIdentifierAsAttribute & RawProcessOutgoingFlowsWithoutBPMNNamespace;
export type RawProcessEndEvent = ProcessIdentifierAsAttribute & RawProcessIncomingFlows;
export type RawProcessEndEventWithoutBPMNNamespace = ProcessIdentifierAsAttribute & RawProcessIncomingFlowsWithoutBPMNNamespace;
export type RawProcessGateway = ProcessIdentifierAsAttribute & RawProcessIncomingFlows & RawProcessOutgoingFlows;
export type RawProcessGatewayWithoutBPMNNamespace = ProcessIdentifierAsAttribute & RawProcessIncomingFlowsWithoutBPMNNamespace & RawProcessOutgoingFlowsWithoutBPMNNamespace;
export type RawProcessSequenceFlow = ProcessIdentifierAsAttribute & ProcessFlowReferencesAsAttributes;
export type ProcessPropertyAttributes = (ProcessNameAsAttribute & ProcessValueAsAttribute)[];
export type CamundaProperty = { 'camunda:property': ProcessPropertyAttributes };
export type RawProcessTask = ProcessIdentifierAsAttribute & ProcessNameAsAttribute & RawProcessIncomingFlows & RawProcessOutgoingFlows & { 'bpmn:extensionElements'?: [{ 'camunda:properties': CamundaProperty[] }] };
export type RawProcessTaskWithoutBPMNNamespace = ProcessIdentifierAsAttribute & ProcessNameAsAttribute & RawProcessIncomingFlowsWithoutBPMNNamespace & RawProcessOutgoingFlowsWithoutBPMNNamespace & { 'extensionElements'?: [{ 'camunda:properties': CamundaProperty[] }] };
export type RawProcessWithBPMNNamespace = { '_attributes': { 'id': string, 'isExecutable': string }, 'bpmn:startEvent': RawProcessStartEvent[], 'bpmn:exclusiveGateway'?: RawProcessGateway[], 'bpmn:inclusiveGateway'?: RawProcessGateway[], 'bpmn:parallelGateway'?: RawProcessGateway[], 'bpmn:sequenceFlow': RawProcessSequenceFlow[], 'bpmn:task': RawProcessTask[], 'bpmn:endEvent': RawProcessEndEvent[] };
export type RawProcessWithoutBPMNNamespace = { '_attributes': { 'id': string, 'isExecutable': string }, 'startEvent': RawProcessStartEventWithoutBPMNNamespace[], 'exclusiveGateway'?: RawProcessGatewayWithoutBPMNNamespace[], 'inclusiveGateway'?: RawProcessGatewayWithoutBPMNNamespace[], 'parallelGateway'?: RawProcessGatewayWithoutBPMNNamespace[], 'sequenceFlow': RawProcessSequenceFlow[], 'task': RawProcessTaskWithoutBPMNNamespace[], 'endEvent': RawProcessEndEventWithoutBPMNNamespace[] };
export type RawProcess = RawProcessWithBPMNNamespace | RawProcessWithoutBPMNNamespace;


/* CONVERTED PROCESS */
export type ProcessIdentifierAttribute = { 'identifier': string };
export type ProcessTypeAttribute = { 'type': ProcessElementType };
export type ListOfProcessIncomingFlowIdentifiers = { 'incoming': string[] };
export type ListOfProcessOutgoingFlowIdentifiers = { 'outgoing': string[] };
export type ProcessStartEvent = ListOfProcessOutgoingFlowIdentifiers;
export type ListOfProcessStartEvents = { [key: string]: ProcessStartEvent };
export type ProcessEndEvent = ListOfProcessIncomingFlowIdentifiers;
export type ListOfProcessEndEvents = { [key: string]: ProcessEndEvent };
export type ProcessFlowEndpoints = { 'source': string, 'target': string };
export type ListOfProcessFlows = { [key: string]: ProcessFlowEndpoints };
export type ProcessTask = ListOfProcessIncomingFlowIdentifiers & ListOfProcessOutgoingFlowIdentifiers;
export type ListOfProcessTasks = { [key: string]: ProcessTask };
export const ProcessGatewayTypeValues = ['exclusive', 'inclusive', 'parallel'];
export type ProcessGatewayType = typeof ProcessGatewayTypeValues[number];
export const ProcessGatewayBehaviorValues = ['divergent', 'convergent'];
export type ProcessGatewayBehavior = typeof ProcessGatewayBehaviorValues[number];
export type ProcessGateway = ListOfProcessIncomingFlowIdentifiers & ListOfProcessOutgoingFlowIdentifiers & { 'type': ProcessGatewayType } & { 'behavior': ProcessGatewayBehavior };
export type ListOfProcessGateways = { [key: string]: ProcessGateway };
export type ProcessElement = ProcessGateway | ProcessTask | ProcessStartEvent | ProcessEndEvent;
export const ProcessControlTypeValues = ['standard', 'key', 'compensating'];
export type ProcessControlType = typeof ProcessControlTypeValues[number];
export const ProcessEventTypeValues = ['start', 'end'];
export type ProcessEventType = typeof ProcessEventTypeValues[number];
export type ProcessElementType = 'gateway' | 'task' | ProcessEventType;
export type ListOfProcessElements = ListOfProcessGateways | ListOfProcessTasks | ListOfProcessStartEvents | ListOfProcessEndEvents;
export type AllProcessElements = { [key in ('gateways' | 'tasks' | 'start' | 'end')]: ListOfProcessElements };
export type ProcessElementWithType = ProcessElement & ProcessTypeAttribute;
export type AllProcessElementsWithIdentifiers = { [key: string]: ProcessElementWithType };
export type ListOfProcessElementInstances = { [key: string]: ProcessElementClass };
export type ListOfProcessConnectionInstances = { [key: string]: ProcessConnectionClass };
export type TreeOfProcessInstances = { 'elements': ListOfProcessElementInstances, 'connections': ListOfProcessConnectionInstances };
export type ProcessGatewayObject = { 'identifier': Identifier, 'type': ProcessGatewayType, 'behavior': ProcessGatewayBehavior, 'reference': Nullable<Identifier>, 'list_of_parents': Identifier[], 'list_of_connections': Identifier[], 'child'?: Identifier };
export type ListOfProcessGatewayObjects = { [key: string]: ProcessGatewayObject };
export type ProcessElementObject = { 'identifier': Identifier, 'list_of_parents': Identifier[] };
export type ProcessExecutableElementObject = ProcessElementObject & { 'child': Identifier };
export type ProcessStandardTaskObject = ProcessExecutableElementObject & { 'element': 'task' };
export type ProcessControlBaseObject = ProcessExecutableElementObject & { 'element': 'control', 'type': 'standard' | 'key' | 'compensating' };
export type ProcessStandardControlObject = ProcessControlBaseObject & { 'type': 'standard' };
export type ProcessKeyControlObject = ProcessControlBaseObject & { 'type': 'key', 'reference'?: Identifier };
export type ProcessCompensatingControlObject = ProcessControlBaseObject & { 'type': 'compensating', 'reference': Identifier };
export type ProcessControlObject = ProcessStandardControlObject | ProcessKeyControlObject | ProcessCompensatingControlObject;
export type ProcessTaskObject = ProcessStandardTaskObject | ProcessControlObject;
export type ListOfProcessTaskObjects = { [key: string]: ProcessTaskObject };
export type ProcessEventObject = ProcessElementObject & { 'child'?: Identifier, 'type': ProcessEventType };
export type ListOfProcessEventObjects = { [key: string]: ProcessEventObject };
export type ProcessConnectionObject = { 'identifier': Identifier, 'gateway': Identifier, 'first_element': Identifier, 'last_element': Identifier };
export type ListOfProcessConnectionObjects = { [key: string]: ProcessConnectionObject };
export type TreeOfProcessObjects = { 'gateways': ListOfProcessGatewayObjects, 'tasks': ListOfProcessTaskObjects, 'events': ListOfProcessEventObjects, 'connections': ListOfProcessConnectionObjects };
export type Process = ProcessIdentifierAttribute & { 'start': ListOfProcessStartEvents, 'end': ListOfProcessEndEvents, 'flows': ListOfProcessFlows, 'tasks': ListOfProcessTasks, 'gateways': ListOfProcessGateways };
export type FlattenProcess = Process & { 'flows': ListOfProcessFlows } & { 'elements': AllProcessElementsWithIdentifiers };